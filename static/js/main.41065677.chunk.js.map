{"version":3,"sources":["components/FoodForm.tsx","components/FoodItem.tsx","components/FoodList.tsx","components/FoodMap.tsx","components/Food.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["FoodForm","props","disabled","createList","deleteAllItem","randomMix","randomSelect","useState","inputData","setInputData","className","type","id","value","onChange","e","target","onClick","FoodItem","selectOn","updataItem","deleteItem","editing","setEditing","name","setName","FoodList","data","countId","list","map","item","key","style","width","height","FoodMap","useEffect","callBack","latitude","longitude","dataList","container","document","getElementById","options","center","window","kakao","maps","LatLng","level","Map","infowindow","InfoWindow","zIndex","displayMarker","place","marker","Marker","position","y","x","event","addListener","setContent","place_name","open","services","Places","keywordSearch","status","pagination","Status","OK","bounds","LatLngBounds","i","length","extend","push","console","log","setBounds","navigator","geolocation","getCurrentPosition","pos","coords","countObj","countIdx","randomNum","countMsgNum","dataIdArr","dataId","Math","floor","localStorage","getItem","JSON","parse","max","apply","Food","state","on","information","createItem","setState","setItem","stringify","alert","info","filter","random","finalData","shuffle","j","countStart","countPointerMove","spped","listLength","countNum","setInterval","clearInterval","setTimeout","countMsg","this","Component","App","Boolean","location","hostname","match","ReactDOM","render","StrictMode","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.41065677.chunk.js","sourcesContent":["import React, { useState } from 'react';\r\n\r\nconst FoodForm = (props: {\r\n  disabled: boolean;\r\n  createList: (data: string) => void;\r\n  deleteAllItem: () => void;\r\n  randomMix: () => void;\r\n  randomSelect: () => void;\r\n}) => {\r\n  const {\r\n    disabled,\r\n    createList,\r\n    deleteAllItem,\r\n    randomMix,\r\n    randomSelect,\r\n  } = props;\r\n  const [inputData, setInputData] = useState('');\r\n  return (\r\n    <div className=\"search\">\r\n      <input\r\n        type=\"text\"\r\n        id=\"input-txt\"\r\n        className=\"inputTxt\"\r\n        value={inputData}\r\n        onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\r\n          setInputData(e.target.value);\r\n        }}\r\n      />\r\n      <div className=\"btnArea\">\r\n        <button\r\n          type=\"button\"\r\n          disabled={disabled ? true : false}\r\n          onClick={() => {\r\n            createList(inputData);\r\n            setInputData('');\r\n          }}\r\n        >\r\n          add\r\n        </button>\r\n        <button\r\n          type=\"button\"\r\n          disabled={disabled ? true : false}\r\n          onClick={() => {\r\n            deleteAllItem();\r\n          }}\r\n        >\r\n          all delete\r\n        </button>\r\n        <button\r\n          type=\"button\"\r\n          disabled={disabled ? true : false}\r\n          onClick={() => {\r\n            randomMix();\r\n          }}\r\n        >\r\n          mix\r\n        </button>\r\n        <button\r\n          type=\"button\"\r\n          disabled={disabled ? true : false}\r\n          onClick={() => {\r\n            randomSelect();\r\n          }}\r\n        >\r\n          select\r\n        </button>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default FoodForm;\r\n","import React, { useState } from 'react';\r\n\r\nconst FoodItem = (props: {\r\n  id: number;\r\n  name: string;\r\n  selectOn: string;\r\n  disabled: boolean;\r\n  updataItem: (id: number, name: string) => void;\r\n  deleteItem: (id: number) => void;\r\n}) => {\r\n  const { id, selectOn, disabled, updataItem, deleteItem } = props;\r\n  const [editing, setEditing] = useState(false);\r\n  const [name, setName] = useState(props.name);\r\n\r\n  if (editing) {\r\n    return (\r\n      <div className={selectOn}>\r\n        <input\r\n          type=\"text\"\r\n          value={name}\r\n          onChange={(e) => {\r\n            setName(e.target.value);\r\n          }}\r\n        />\r\n        <button\r\n          type=\"button\"\r\n          className=\"apply\"\r\n          disabled={disabled ? true : false}\r\n          onClick={() => {\r\n            setEditing(!editing);\r\n            updataItem(id, name);\r\n          }}\r\n        >\r\n          apply\r\n        </button>\r\n        <button\r\n          type=\"button\"\r\n          className=\"delete\"\r\n          disabled={disabled ? true : false}\r\n          onClick={() => {\r\n            deleteItem(id);\r\n          }}\r\n        >\r\n          delete\r\n        </button>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <div className={selectOn}>\r\n      {name}\r\n      <button\r\n        type=\"button\"\r\n        className=\"modify\"\r\n        disabled={disabled ? true : false}\r\n        onClick={() => {\r\n          setEditing(!editing);\r\n        }}\r\n      >\r\n        modify\r\n      </button>\r\n      <button\r\n        type=\"button\"\r\n        className=\"delete\"\r\n        disabled={disabled ? true : false}\r\n        onClick={() => {\r\n          deleteItem(id);\r\n        }}\r\n      >\r\n        delete\r\n      </button>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default FoodItem;\r\n","import React, { useState } from 'react';\r\nimport FoodItem from './FoodItem';\r\n\r\nconst FoodList = (props: {\r\n  countId: number;\r\n  data: object[];\r\n  disabled: boolean;\r\n  updataItem: (id: number, name: string) => void;\r\n  deleteItem: (id: number) => void;\r\n}) => {\r\n  const { data, disabled, updataItem, deleteItem, countId } = props;\r\n  const list = data.map((item: any, key: number) => {\r\n    return (\r\n      <FoodItem\r\n        key={item.id}\r\n        id={item.id}\r\n        name={item.name}\r\n        selectOn={countId === item.id ? 'on' : ''}\r\n        disabled={disabled}\r\n        updataItem={updataItem}\r\n        deleteItem={deleteItem}\r\n      />\r\n    );\r\n  });\r\n  return <div className=\"list\">{list}</div>;\r\n};\r\n\r\nexport default FoodList;\r\n","import React, { useEffect } from 'react';\r\n\r\ndeclare global {\r\n  interface Window {\r\n    kakao: any;\r\n  }\r\n}\r\n\r\nconst style: {\r\n  width: string;\r\n  height: string;\r\n} = {\r\n  width: '100%',\r\n  height: '200px',\r\n};\r\n\r\nconst FoodMap = (props: { createList: (data: string) => void }) => {\r\n  const { createList } = props;\r\n\r\n  useEffect(() => {\r\n    // 현재 위치\r\n    let latitude: number = 0;\r\n    let longitude: number = 0;\r\n\r\n    // 검색 데이터\r\n    let dataList: string[] = [];\r\n\r\n    const setLocation = (callBack: any): void => {\r\n      navigator.geolocation.getCurrentPosition(function (pos) {\r\n        latitude = pos.coords.latitude;\r\n        longitude = pos.coords.longitude;\r\n        callBack(latitude, longitude);\r\n      });\r\n    };\r\n\r\n    setLocation((latitude: any, longitude: any) => {\r\n      // 검색 엘리먼트\r\n      let container = document.getElementById('map');\r\n      let options = {\r\n        center: new window.kakao.maps.LatLng(latitude, longitude),\r\n        level: 10,\r\n      };\r\n\r\n      let map = new window.kakao.maps.Map(container, options);\r\n\r\n      // 마커를 클릭하면 장소명을 표출할 인포윈도우\r\n      let infowindow = new window.kakao.maps.InfoWindow({ zIndex: 1 });\r\n\r\n      // 장소 검색 객체를 생성\r\n      let ps = new window.kakao.maps.services.Places();\r\n\r\n      // 키워드로 장소를 검색\r\n      ps.keywordSearch('식당', placesSearchCB, {\r\n        x: latitude,\r\n        y: longitude,\r\n      });\r\n\r\n      // 키워드 검색 완료 시 호출되는 콜백함수\r\n      function placesSearchCB(data: any, status: any, pagination: any) {\r\n        if (status === window.kakao.maps.services.Status.OK) {\r\n          // 검색된 장소 위치를 기준으로 지도 범위를 재설정하기위해 LatLngBounds 객체에 좌표를 추가\r\n          let bounds = new window.kakao.maps.LatLngBounds();\r\n\r\n          for (let i = 0; i < data.length; i++) {\r\n            displayMarker(data[i]);\r\n            bounds.extend(new window.kakao.maps.LatLng(data[i].y, data[i].x));\r\n\r\n            dataList.push(data[i].place_name);\r\n          }\r\n\r\n          console.log(dataList);\r\n\r\n          // 검색된 장소 위치를 기준으로 지도 범위를 재설정\r\n          map.setBounds(bounds);\r\n        }\r\n      }\r\n\r\n      // 지도에 마커를 표시하는 함수\r\n      function displayMarker(place: any) {\r\n        // 마커를 생성하고 지도에 표시\r\n        let marker = new window.kakao.maps.Marker({\r\n          map: map,\r\n          position: new window.kakao.maps.LatLng(place.y, place.x),\r\n        });\r\n\r\n        // 마커에 클릭이벤트를 등록\r\n        window.kakao.maps.event.addListener(marker, 'click', function () {\r\n          // 마커를 클릭하면 장소명이 인포윈도우에 표출\r\n          infowindow.setContent(\r\n            '<div style=\"padding:5px;font-size:12px;\">' +\r\n            place.place_name +\r\n            '</div>'\r\n          );\r\n          infowindow.open(map, marker);\r\n        });\r\n      }\r\n    });\r\n\r\n    // console.log(dataList);\r\n  }, []);\r\n\r\n  return <div id=\"map\" style={style} />;\r\n};\r\n\r\nexport default FoodMap;\r\n","import React, { Component } from 'react';\r\nimport FoodForm from './FoodForm';\r\nimport FoodList from './FoodList';\r\nimport FoodMap from './FoodMap';\r\n\r\nlet countObj: any = null;\r\nlet countIdx: number = 0;\r\nlet randomNum: number = 0;\r\nlet countMsgNum: number = 0;\r\nlet dataIdArr: number[] = [];\r\nlet dataId: number = 0;\r\nlet data: any = '';\r\n\r\ncountMsgNum = Math.floor(data.length * -10 * -10 * 0.005);\r\nif (localStorage.getItem('data') !== null) {\r\n  data = localStorage.getItem('data');\r\n  data = JSON.parse(data);\r\n  dataIdArr = data.map((item: any) => {\r\n    return item.id;\r\n  });\r\n  dataIdArr.length !== 0\r\n    ? (dataId = Math.max.apply(null, dataIdArr) + 1)\r\n    : (dataId = 0);\r\n} else {\r\n  data = [];\r\n  dataId = 0;\r\n}\r\n\r\nclass Food extends Component {\r\n  state = {\r\n    id: dataId,\r\n    on: '',\r\n    countId: -1,\r\n    disabled: false,\r\n    information: data,\r\n  };\r\n\r\n  createItem = (inputData: string) => {\r\n    const { information } = this.state;\r\n    const item: {\r\n      id: number;\r\n      name: string;\r\n    }[] = information;\r\n    if (inputData === '') {\r\n      alert('값이 없음');\r\n      return;\r\n    }\r\n    item.push({ id: this.state.id++, name: inputData });\r\n    this.setState(\r\n      {\r\n        information: item,\r\n      },\r\n      () => {\r\n        localStorage.setItem('data', JSON.stringify(this.state.information));\r\n        // countMsgNum = Math.floor((information.length * -10) * -10 * 0.005);\r\n      }\r\n    );\r\n  };\r\n\r\n  updataItem = (id: number, name: string) => {\r\n    const { information } = this.state;\r\n    this.setState({\r\n      information: information.map((info: { id: number; name: string }) =>\r\n        info.id === id ? { id: id, name } : info\r\n      ),\r\n    });\r\n  };\r\n\r\n  deleteItem = (id: number) => {\r\n    const { information } = this.state;\r\n    this.setState(\r\n      {\r\n        information: information.filter(\r\n          (info: { id: number; name: string }) => info.id !== id\r\n        ),\r\n      },\r\n      () => {\r\n        localStorage.setItem('data', JSON.stringify(this.state.information));\r\n        // countMsgNum = Math.floor((information.length * -10) * -10 * 0.005);\r\n      }\r\n    );\r\n  };\r\n\r\n  deleteAllItem = () => {\r\n    const { information } = this.state;\r\n    this.setState(\r\n      {\r\n        id: 0,\r\n        information: [],\r\n      },\r\n      () => {\r\n        localStorage.setItem('data', JSON.stringify(this.state.information));\r\n        // countMsgNum = Math.floor((information.length * -10) * -10 * 0.005);\r\n      }\r\n    );\r\n  };\r\n\r\n  randomMix = () => {\r\n    const { information } = this.state;\r\n    let random: number[] = [];\r\n    let data: {\r\n      id: number;\r\n      name: string;\r\n    }[] = information;\r\n    let finalData: {\r\n      id: number;\r\n      name: string;\r\n    }[] = [];\r\n    random = this.shuffle(\r\n      information.map((info: { id: number; name: string }) => info.id)\r\n    );\r\n    for (let i = 0; i < random.length; i++) {\r\n      for (let j = 0; j < data.length; j++) {\r\n        if (random[i] === data[j].id) {\r\n          finalData.push(data[j]);\r\n        }\r\n      }\r\n    }\r\n    this.setState({\r\n      information: finalData,\r\n    });\r\n  };\r\n\r\n  shuffle = (data: number[]) => {\r\n    let j, x, i;\r\n    for (let i = data.length; i; i -= 1) {\r\n      j = Math.floor(Math.random() * i);\r\n      x = data[i - 1];\r\n      data[i - 1] = data[j];\r\n      data[j] = x;\r\n    }\r\n    return data;\r\n  };\r\n\r\n  randomSelect = () => {\r\n    const { information } = this.state;\r\n    if (information.length === 0) {\r\n      alert('값이 없음');\r\n      return;\r\n    }\r\n    randomNum = Math.floor(Math.random() * information.length);\r\n    this.countStart();\r\n    console.log('result index : ' + randomNum);\r\n  };\r\n\r\n  countStart = () => {\r\n    const { information } = this.state;\r\n    countIdx = randomNum;\r\n    this.countPointerMove(50, information.length);\r\n    this.setState({\r\n      on: 'on',\r\n      disabled: true,\r\n    });\r\n  };\r\n\r\n  countPointerMove = (spped: number, listLength: number) => {\r\n    const { information } = this.state;\r\n    const data: {\r\n      id: number;\r\n      name: string;\r\n      on: boolean;\r\n    }[] = information;\r\n    let countNum: number = listLength * -10;\r\n    countObj = setInterval(() => {\r\n      countNum++;\r\n      countIdx++;\r\n      if (countIdx >= listLength) {\r\n        countIdx = 0;\r\n      }\r\n      if (countNum >= 0) {\r\n        clearInterval(countObj);\r\n        this.setState({\r\n          on: '',\r\n          disabled: false,\r\n        });\r\n        setTimeout(() => {\r\n          // countMsgNum = Math.floor((information.length * -10) * -10 * 0.005);\r\n          alert(data[randomNum].name);\r\n        }, 500);\r\n      }\r\n      this.setState({\r\n        countId: data[countIdx].id,\r\n      });\r\n      this.countMsg(countNum);\r\n    }, spped);\r\n  };\r\n\r\n  countMsg = (countNum: number) => {\r\n    countMsgNum = Math.floor(countNum * -10 * 0.005);\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <div className={this.state.on}>\r\n        <FoodMap createList={this.createItem} />\r\n        <FoodForm\r\n          disabled={this.state.disabled}\r\n          createList={this.createItem}\r\n          deleteAllItem={this.deleteAllItem}\r\n          randomMix={this.randomMix}\r\n          randomSelect={this.randomSelect}\r\n        />\r\n        <FoodList\r\n          data={this.state.information}\r\n          disabled={this.state.disabled}\r\n          deleteItem={this.deleteItem}\r\n          updataItem={this.updataItem}\r\n          countId={this.state.countId}\r\n        />\r\n        {this.state.disabled && (\r\n          <span className=\"count\">\r\n            {/* {this.state.information[countIdx].name} */}\r\n            <span>{countMsgNum}</span>\r\n          </span>\r\n        )}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Food;\r\n","import React from 'react';\nimport Food from './components/Food';\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Food />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}